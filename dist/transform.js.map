{"version":3,"sources":["../src/transform.js"],"names":["toBase64","data","encoding","Buffer","from","toString","inlineScript","$","fetch","config","el","src","attr","inlineResource","contents","minify","code","transform","fetcher","create","get","bind","scripts","toArray","map","all"],"mappings":";;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;;;AAEA,IAAMA,WAAW,SAAXA,QAAW,CAACC,IAAD,EAAOC,QAAP;AAAA,SACfC,OAAOC,IAAP,CAAYH,IAAZ,EAAkBC,QAAlB,EAA4BG,QAA5B,CAAqC,QAArC,CADe;AAAA,CAAjB;;AAGA,IAAMC,eAAe,SAAfA,YAAe,CAACC,CAAD,EAAIC,KAAJ,EAAWC,MAAX;AAAA;AAAA,0EAAsB,iBAAMC,EAAN;AAAA;;AAAA;AAAA;AAAA;AAAA;AACnCC,iBADmC,GAC7BJ,EAAEG,EAAF,EAAME,IAAN,CAAWD,GAAX,CAD6B;;AAAA,oBAErC,CAACA,GAAD,IAAQ,CAACF,OAAOI,cAAP,CAAsBH,EAAtB,CAF4B;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA,qBAKlBF,MAAMG,GAAN,EAAW,EAAET,UAAU,MAAZ,EAAX,CALkB;;AAAA;AAKnCY,sBALmC;AAAA,iCAMxB,mBAASC,MAAT,CAAgBD,QAAhB,CANwB,EAMjCE,IANiC,oBAMjCA,IANiC;;AAOzCT,gBAAEG,EAAF,EAAME,IAAN,CACE,KADF,iDAE+CZ,SAASgB,IAAT,EAAe,MAAf,CAF/C;AAIAT,gBAAEG,EAAF,EAAME,IAAN,CAAW,SAAX,EAAsB,OAAtB;;AAXyC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAtB;;AAAA;AAAA;AAAA;AAAA;AAAA,CAArB;;AAcA,IAAMK;AAAA,yEAAY,kBAAOV,CAAP,EAAUE,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACVS,mBADU,GACA,gBAAMC,MAAN,CAAaV,OAAOD,KAApB,CADA;AAEVA,iBAFU,GAEFU,QAAQE,GAAR,CAAYC,IAAZ,CAAiBH,OAAjB,CAFE;AAGVI,mBAHU,GAGAf,EAAE,aAAF,EACbgB,OADa,GAEbC,GAFa,CAETlB,aAAaC,CAAb,EAAgBC,KAAhB,EAAuBC,MAAvB,CAFS,CAHA;AAAA;AAAA,mBAOV,kBAAQgB,GAAR,WAAgBH,OAAhB,EAPU;;AAAA;AAAA,8CAQTf,CARS;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAZ;;AAAA;AAAA;AAAA;AAAA,GAAN;;kBAWeU,S","file":"transform.js","sourcesContent":["import axios from 'axios';\nimport UglifyJS from 'uglify-js';\n\nconst toBase64 = (data, encoding) =>\n  Buffer.from(data, encoding).toString('base64');\n\nconst inlineScript = ($, fetch, config) => async el => {\n  const src = $(el).attr(src);\n  if (!src || !config.inlineResource(el)) {\n    return;\n  }\n  const contents = await fetch(src, { encoding: 'utf8' });\n  const { code } = UglifyJS.minify(contents);\n  $(el).attr(\n    'src',\n    `data:text/javascript;charset=utf-8;base64,${toBase64(code, 'utf8')}`,\n  );\n  $(el).attr('charset', 'utf-8');\n};\n\nconst transform = async ($, config) => {\n  const fetcher = axios.create(config.fetch);\n  const fetch = fetcher.get.bind(fetcher);\n  const scripts = $('script[src]')\n    .toArray()\n    .map(inlineScript($, fetch, config));\n\n  await Promise.all([...scripts]);\n  return $;\n};\n\nexport default transform;\n"]}